# 3.2: Function Arguments and Return Values

## Key Concepts

- Function arguments
- Argument passing
- Return values

## Explanations

Understanding how to pass arguments to functions and handle return values is essential for writing effective and efficient code. By using arguments and return values correctly, you can write functions that are reusable and flexible, making your code more modular and maintainable.

## Examples

- def greet(name, age): print('Hello, ' + name + '. You are ' + str(age) + ' years old.')
- greet('John', 30)  # Output: Hello, John. You are 30 years old.
- def add(a, b): return a + b; result = add(2, 3); print(result)  # Output: 5

## Summary Points

- Functions can accept multiple arguments
- Arguments can be passed positionally, by keyword, or with default values
- Functions can return multiple values using tuples, lists, or dictionaries
- Understanding argument passing and return values is essential for writing effective code
- Functions can be made more flexible and reusable by using arguments and return values correctly

## Self-Assessment Questions

Q: What are the different ways to pass arguments to a function in Python?
A: Arguments can be passed positionally, by keyword, or with default values.

Q: How can a function return multiple values in Python?
A: A function can return multiple values using tuples, lists, or dictionaries.

Q: Why is it important to understand argument passing and return values in Python?
A: Understanding argument passing and return values is essential for writing effective and efficient code.

