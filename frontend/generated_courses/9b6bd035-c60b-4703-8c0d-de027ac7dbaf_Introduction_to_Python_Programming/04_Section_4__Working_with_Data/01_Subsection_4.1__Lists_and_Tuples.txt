# Subsection 4.1: Lists and Tuples

## Key Concepts

- Lists
- Tuples
- Indexing
- Slicing
- Manipulation

## Explanations

In Python, lists and tuples are two types of data structures that can store multiple values. Lists are mutable, meaning they can be changed after creation, while tuples are immutable, meaning they cannot be changed. Indexing refers to accessing a specific element in a list or tuple by its position, with the first element at index 0. Slicing allows you to access a subset of elements from a list or tuple. You can manipulate lists by adding, removing, or modifying elements, while tuples can only be manipulated by converting them to lists first. Lists and tuples are useful for storing and processing collections of data, such as numbers, strings, or other types of data.

## Examples

- Creating a list: my_list = [1, 2, 3, 4, 5]
- Accessing an element: my_list[0]  # returns 1
- Slicing a list: my_list[1:3]  # returns [2, 3]

## Summary Points

- Lists are mutable, while tuples are immutable
- Indexing allows you to access specific elements in a list or tuple
- Slicing allows you to access subsets of elements from a list or tuple
- Lists can be manipulated by adding, removing, or modifying elements
- Tuples can only be manipulated by converting them to lists first

## Self-Assessment Questions

Q: What is the difference between a list and a tuple in Python?
A: A list is mutable, while a tuple is immutable.

Q: How do you access a specific element in a list or tuple?
A: You can access a specific element in a list or tuple by its index, with the first element at index 0.

Q: What is slicing in the context of lists and tuples?
A: Slicing allows you to access a subset of elements from a list or tuple.

